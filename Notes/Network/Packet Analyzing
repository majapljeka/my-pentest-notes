TCPdump/WinDump:
D Will display any interfaces available to capture from.
i Selects an interface to capture from. ex. -i eth0
n Do not resolve hostnames.
nn Do not resolve hostnames or well-known ports.
e Will grab the ethernet header along with upper-layer data.
X Show Contents of packets in hex and ASCII.
XX Same as X, but will also specify ethernet headers. (like using Xe)
v, vv, vvv Increase the verbosity of output shown and saved.
c Grab a specific number of packets, then quit the program.
s Defines how much of a packet to grab.
S change relative sequence numbers in the capture display to absolute sequence numbers. (13248765839 instead of 101)
q Print less protocol information.
r file.pcap Read from a file.
w file.pcap Write into a file

which tcpdump
sudo tcpdump --version
sudo tcpdump -D = list possible interfaces
sudo tcpdump -i eth0 = start a capture on eth0
sudo tcpdump -i eth0 -nn = Disable Name Resolution
tcpdump -i [interface name or #] -vX
sudo tcpdump -i eth0 -e = Display the Ethernet Header
sudo tcpdump -i eth0 -X = Include ASCII and Hex Output
sudo tcpdump -i eth0 -nnvXX = Tcpdump Switch Combinations

sudo tcpdump -i eth0 -w ~/output.pcap = Save our PCAP Output to a File
tcpdump -i [interface name or #] -nvw [/path/of/filename.pcap]

sudo tcpdump -r ~/output.pcap = Reading Output From a File
tcpdump -nnSXr [file/to/read.pcap]

Helpful TCPDump Filters
Filter Result
host host will filter visible traffic to show anything involving the designated host. Bi-directional
src / dest src and dest are modifiers. We can use them to designate a source or destination host or port.
net net will show us any traffic sourcing from or destined to the network designated. It uses / notation.
proto will filter for a specific protocol type. (ether, TCP, UDP, and ICMP as examples)
port port is bi-directional. It will show any traffic with the specified port as the source or destination.
portrange portrange allows us to specify a range of ports. (0-1024)
less / greater "< >" less and greater can be used to look for a packet or protocol option of a specific size.
and / && and && can be used to concatenate two different filters together. for example, src host AND port.
or or allows for a match on either of two conditions. It does not have to meet both. It can be tricky.
not not is a modifier saying anything but x. For example, not UDP.

sudo tcpdump -i eth0 host 172.16.146.2
sudo tcpdump -i eth0 tcp src port 80
sudo tcpdump -i eth0 udp
sudo tcpdump -i eth0 tcp port 443
sudo tcpdump -i eth0 less 64
sudo tcpdump -i eth0 greater 500
sudo tcpdump -r sus.pcap icmp or host 172.16.146.1
tcpdump -i eth0 'tcp[13] &2 != 0' = This is counting to the 13th byte in the structure and looking at the 2nd bit. If it is set to 1 or ON, the SYN flag is set.
sudo tcpdump -r TCPDump-lab-2.pcap tcp port 80 -nn
SYN: Flags [S]
SYN-ACK: Flags [S.]
ACK: Flags [.]

WIRESHARK
which wireshark
TShark VS. Wireshark (Terminal vs. GUI)
tshark -h
tshark -i 1 -w /tmp/test
sudo tshark -i eth0 -f "host 172.16.146.2" = applying filters

Display Filters Result
ip.addr == x.x.x.x Capture only traffic pertaining to a certain host. This is an OR statement.
ip.addr == x.x.x.x/24 Capture traffic pertaining to a specific network. This is an OR statement.
ip.src/dst == x.x.x.x Capture traffic to or from a specific host
dns / tcp / ftp / arp / ip filter traffic by a specific protocol. There are many more options.
tcp.port == x filter by a specific tcp port.
tcp.port / udp.port != x will capture everything except the port specified
and / or / not AND will concatenate, OR will find either of two options, NOT will exclude your input option.

statistics plugin = view conversation metadata and even protocol breakdowns for pcap file
analyze = applying filters, following streams