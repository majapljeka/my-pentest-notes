Basic

PS C:\Users\bla> Get-Help ipconfig
Get-Help Get-NetIPConfiguration
Get-Help Get-NetIPConfiguration -online == browser help
Get-Location = where we are now == pwd
Get-ChildItem == DIR
Get-Content txt.txt == display content of file
Get-Command = list of commands = verb-noun
Get-Command -verb get
Get-Command -noun windows*

Check SID:
wmic useraccount get name,sid
wmic group get name,sid

CTRL+ALT+Shift+? This will print the entire list of keyboard shortcuts PowerShell will recognize!!!

CheckHistory

Get-History == r r4 = to run command under that number
get-content C:\Users\User\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt

PS C:\Windows\system32> Get-Alias == type just gal
PS C:\Windows\system32> Set-Alias -Name gh -Value Get-Help

PS C:\bla> Get-Module = all modules we have installed but not loaded into our session
PS C:\bla> Get-Module -ListAvailable
Import-Module .\PowerSploit.psd1 = have in mind execution-policy
Get-ExecutionPolicy
Get-ExecutionPolicy -list
Set-ExecutionPolicy undefined = and now we can run again Import-Module .\PowerSploit.psd1
Get-NetLocalgroup
$env:PSModulePath = default module path is by listing the environment variable
Get-Command -Module

Get-Command -Module PowerShellGet| install-module = powershell gallery web browser
AdminToolbox , ActiveDirectory, Empire / Situational Awareness, Inveigh, BloodHound / SharpHound

Managing domain users and groups:

get-localgroup
Get-LocalUser
Get-Command user === help

New-LocalUser -Name "JLawrence" -NoPassword
Set-LocalUser -Name "JLawrence" -Password $Password -Description "CEO EagleFang"
Get-LocalUser === all local users on PC host
Get-LocalGroup
Get-LocalGroupMember -Name "Users"
Add-LocalGroupMember -Group "Remote Desktop Users" -Member "JLawrence"
Install - ActiveDirectory PowerShell module and then
Get-WindowsCapability -Name RSAT* -Online | Add-WindowsCapability -Online
Get-Module -Name ActiveDirectory -ListAvailable
Get-ADUser -Filter *
Get-ADUser -Identity TSilver
Get-ADUser -Filter {EmailAddress -like '*greenhorn.corp'}
New-ADUser -Name "MTanaka" -Surname "Tanaka" -GivenName "Mori" -Office "Security" -OtherAttributes @{'title'="Sensei";'mail'="MTanaka@greenhorn.corp"} -Accountpassword (Read-Host -AsSecureString "AccountPassword") -Enabled $true
Get-ADUser -Identity MTanaka -Properties * | Format-Table Name,Enabled,GivenName,Surname,Title,Office,Mail
Get-ADUser -Identity MTanaka -Properties * | Format-Table Name,Enabled,GivenName,Surname,Title,Office,Mail
Get-ADUser -Identity MTanaka -Property Description

Files and Directories:
new-item -name "SOPs" -type directory == mkdir
new-Item "Readme.md" -ItemType File
Add-Content .\Readme.md "Title: Insert Document Title Here
Rename-Item .\Cyber-Sec-draft.md -NewName Infosec-SOP-draft.md
get-childitem -Path *.txt | rename-item -NewName {$_.name -replace ".txt",".md"} == rename files from txt to md

Filtering/Finding:
Get-LocalUser administrator | get-member === get-member shows methods and properties of objects
Get-LocalUser administrator | Select-Object -Property * == see all properties for admin user
Get-LocalUser * | Select-Object -Property Name,PasswordLastSet
Get-LocalUser * | Sort-Object -Property Name | Group-Object -property Enabled
get-service | Select-Object -Property DisplayName,Name,Status | Sort-Object DisplayName | fl
Get-Service | where DisplayName -like 'Defender'
Get-Service | where DisplayName -like 'Defender' | Select-Object -Property * == defender specific
get-process | sort | unique | measure-object

Find interesting data!!!
Get-ChildItem -Hidden
Get-ChildItem -Path C:\Users\blabla\ -File -Recurse == all files in folders
Get-Childitem –Path C:\Users\blabla\ -File -Recurse -ErrorAction SilentlyContinue | where {($_.Name -like ".txt")} = just txt Get-Childitem –Path C:\Users\blabla\ -File -Recurse -ErrorAction SilentlyContinue | where {($_.Name -like ".txt" -or $_.Name -like ".py" -or $_.Name -like ".ps1" -or $_.Name -like ".md" -or $_.Name -like ".csv")}
Get-ChildItem -Path C:\Users\MTanaka\ -Filter ".txt" -Recurse -File | sls "Password","credential","key" === sls = grep 

Get-Childitem –Path C:\Users\MTanaka\ -File -Recurse -ErrorAction SilentlyContinue | where {($_. Name -like ".txt" -or $_. Name -like ".py" -or $_. Name -like ".ps1" -or $_. Name -like ".md" -or $_. Name -like ".csv")} | sls "Password","credential","key","UserName"

-->Interesting places:
1.\AppData\ = applications store configuration files, temp saves of documents, and more.
2.C:\Users\User\ = things like VPN keys, SSH keys -> Get-ChildItem -Hidden
3.C:\Users\\AppData\Roaming\Microsoft\Windows\Powershell\PSReadline\ConsoleHost_history.txt
4.Get-Content (Get-PSReadlineOption).HistorySavePath
5.Get-Clipboard
6.Looking at Scheduled tasks

Services:
Get-Help -Service

Get-Service | ft DisplayName,Status

Get-Service -DisplayName "windows update"

Get-Service | measure 

Get-Service | where DisplayName -like 'Defender' | ft DisplayName,ServiceName,Status Get-Service | ft DisplayName,Status 

Get-Service | where Status -like Running | ft DisplayName, Status == display only running 

Get-Service | where DisplayName -like 'Defender*' | ft DisplayName,ServiceName,Status === precisly defender
Start-Service WinDefend     get-service WinDefend
get-service
Stop-Service Spooler
Get-Service Spooler
get-service spooler | Select-Object -Property Name, StartType, Status, DisplayName === here is service status stopped
Set-Service -Name Spooler -StartType Disabled == here is disabled
Get-Service -Name Spooler | Select-Object -Property StartType

Remote:
get-service -ComputerName ACADEMY-ICL-DC
Get-Service -ComputerName ACADEMY-ICL-DC | Where-Object {$_.Status -eq "Running"} == only running
invoke-command -ComputerName ACADEMY-ICL-DC,LOCALHOST -ScriptBlock {Get-Service -Name 'windefend'}

REGISTRY:

https://attack.mitre.org/techniques/T1112/
Get-Item -Path Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run | Select-Object -ExpandProperty Property
Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion -Recurse
Get-ItemProperty -Path Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run == easier to read
reg query HKEY_LOCAL_MACHINE\SOFTWARE\7-Zip
REG QUERY HKCU /F "Password" /t REG_SZ /S /K == !! finding info in registry
Reg query: We are calling on Reg.exe and specifying that we want to query data.
HKCU: This portion is setting the path to search. In this instance, we are looking in all of HKey_Current_User.
/f "password": /f sets the pattern we are searching for. In this instance, we are looking for "Password".
/t REG_SZ: /t is setting the value type to search. If we do not specify, reg query will search through every type.
/s: /s says to search through all subkeys and values recursively.
/k: /k narrows it down to only searching through Key names.

Make new registry key
New-Item -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce\ -Name TestKey. = new registry key
New-ItemProperty -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce\TestKey -Name "access" -PropertyType String -Value "C:\Users\htb-student\Downloads\payload.exe"
reg add "HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\RunOnce\TestKey" /v access /t REG_SZ /d "C:\Users\htb-student\Downloads\payload.exe"
Delete registry key
Remove-ItemProperty -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce\TestKey -Name "access"
Get-ItemProperty -Path HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce\TestKey

WINDOWS EVENT LOG:
CMD = wevtutil, or Get-WinEvent PowerShell cmdlet
ls C:\Windows\System32\winevt\logs. = Windows Event Logs are stored
wevtutil /?
wevtutil el = enumerate the names of all logs present on a Windows system
wevtutil gl "Windows PowerShell" = we can display configuration information for a specific log; gl get logs
wevtutil qe Security /c:5 /rd:true /f:text. = Querying Events last 5 most recent events from the Security log in text format
wevtutil epl System C:\system_export.evtx = exporting
Get-WinEvent -ListLog * == we can list all logs on the computer, giving us the number of records in each log
Get-WinEvent -ListLog Security
Get-WinEvent -LogName 'Security' -MaxEvents 5 | Select-Object -ExpandProperty Message = Querying Last Five Events
Get-WinEvent -FilterHashTable @{LogName='Security';ID='4625 '} = Filtering for Logon Failures
Get-WinEvent -FilterHashTable @{LogName='System';Level='1'} | select-object -ExpandProperty Message

https://4sysops.com/archives/search-the-event-log-with-the-get-winevent-powershell-cmdlet/
https://www.thewindowsclub.com/what-is-wevtutil-and-how-do-you-use-it

Network:
Get-NetIPInterface Retrieve all visible network adapter properties
Set-NetIPInterface -InterfaceIndex 25 -Dhcp Disabled
Get-NetIPAddress Retrieves the IP configurations of each adapter. Similar to IPConfig
Get-NetIPAddress -ifIndex number
Get-NetNeighbor Retrieves the neighbor entries from the cache. Similar to arp -a.
Get-Netroute Will print the current route table. Similar to IPRoute.
Set-NetAdapter Set basic adapter properties at the Layer-2 level such as VLAN id, description, and MAC-Address.
Set-NetIPInterface Modifies the settings of an interface to include DHCP status, MTU, and other metrics.
New-NetIPAddress Creates and configures an IP address.
Set-NetIPAddress Modifies the configuration of a network adapter
Set-NetIPAddress -InterfaceIndex 25 -IPAddress 10.10.100.54 -PrefixLength 24
Disable-NetAdapter Used to disable network adapter interfaces.
Enable-NetAdapter Used to turn network adapters back on and allow network connections.
Restart-NetAdapter Used to restart an adapter. It can be useful to help push changes made to adapter settings.
Restart-NetAdapter -Name 'Ethernet 3'
test-NetConnection Allows for diagnostic checks to be ran on a connection. It supports ping, tcp, route tracing, and more
winrm quickconfig
Test-WSMan -ComputerName "x.x.x.x"

WEB:
Get-Help Invoke-Webrequest
Invoke-WebRequest -Uri "https://domain.html" -Method GET | Get-Member
Invoke-WebRequest -Uri "https://domain.html" -Method GET | fl Images -- just images
Invoke-WebRequest -Uri "https://domain.ps1" -OutFile "C:\PowerView.ps1" - download file
(New-Object Net.WebClient).DownloadFile("https:domain.com/bla.bzip", "domain.zip") - if Invoke-WebRequest is forbidden